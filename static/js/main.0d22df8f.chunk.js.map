{"version":3,"sources":["RecipeComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RecipeComponent","props","recipe","className","src","thumbnail","alt","title","ingredients","split","map","ingredient","href","target","App","useState","recipesFound","setRecipesFound","recipeSearch","setRecipeSearch","searchForRecipes","query","a","fetch","result","json","results","useEffect","encodeURIComponent","response","onSubmit","event","preventDefault","input","querySelector","value","search","id","type","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAoBeA,EAlBQ,SAACC,GACpB,IAAQC,EAAWD,EAAXC,OACR,OACI,sBAAKC,UAAU,SAAf,UACI,sBAAKA,UAAU,QAAf,UACI,qBAAKC,IAAKF,EAAOG,WAAa,wCAAyCC,IAAKJ,EAAOK,QACnF,4BAAIL,EAAOK,WAEdL,EAAOM,aACJ,6BACKN,EAAOM,YAAYC,MAAM,KAAKC,KAAI,SAAAC,GAAU,OAAI,6BAAKA,SAG9D,mBAAGC,KAAMV,EAAOU,KAAMC,OAAO,SAA7B,6BCqCGC,MA3Cf,WACE,MAAwCC,mBAAoB,IAA5D,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAAgB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACFC,MAAM,mEAAD,OAAoEF,IADvE,cACjBG,EADiB,gBAETA,EAAOC,OAFE,uCAEMC,SAFN,2CAAH,sDAqBtB,OAhBAC,qBAAU,WACR,sBAAC,8BAAAL,EAAA,6DACOD,EAAQO,mBAAmBV,GADlC,SAEwBE,EAAiBC,GAFzC,OAEOQ,EAFP,OAGCZ,EAAgBY,GAHjB,0CAAD,KAKC,CAACX,IAWF,sBAAKf,UAAU,MAAf,UACE,mDACA,uBAAMA,UAAU,aAAa2B,SAAU,SAAAC,GAAK,OAXjC,SAACA,GACdA,EAAMC,iBACN,IACMC,EADOF,EAAMlB,OACAqB,cAAc,eACjCf,EAAgBc,EAAME,OACtBF,EAAME,MAAQ,GAMoCC,CAAOL,IAAvD,UACE,uBAAOM,GAAG,aAAaC,KAAK,SAC5B,+CAEDpB,GAAgB,6CAAgBA,EAAhB,SACjB,qBAAKf,UAAU,oBAAf,SACGa,EAAauB,QACZvB,EAAaN,KAAI,SAAAR,GAAM,OACpB,cAAC,EAAD,CAAmCA,OAAQA,GAArBA,EAAOU,eC/B3B4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0d22df8f.chunk.js","sourcesContent":["import { IRecipe } from \"./IRecipe\";\r\n\r\nconst RecipeComponent =(props: {recipe: IRecipe}) => {\r\n    const { recipe } = props;\r\n    return (\r\n        <div className=\"recipe\">\r\n            <div className=\"title\">\r\n                <img src={recipe.thumbnail || 'http://localhost:3000/placeholder.jpg'} alt={recipe.title} />\r\n                <p>{recipe.title}</p>\r\n            </div>\r\n            {recipe.ingredients && \r\n                <ul>\r\n                    {recipe.ingredients.split(',').map(ingredient => <li>{ingredient}</li>)}\r\n                </ul>\r\n            }\r\n            <a href={recipe.href} target='_blank'>View Recipe</a>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RecipeComponent;\r\n\r\n","import React, { FormEvent, useEffect, useState } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n// import { StringifyOptions } from 'node:querystring';\r\nimport { queryAllByAltText } from '@testing-library/dom';\r\nimport { IRecipe } from './IRecipe';\r\nimport Recipe from './RecipeComponent';\r\nimport RecipeComponent from './RecipeComponent';\r\n\r\nfunction App() {\r\n  const [recipesFound, setRecipesFound] = useState<IRecipe[]>([]);\r\n  const [recipeSearch, setRecipeSearch] = useState('');\r\n\r\n  const searchForRecipes = async (query: String): Promise<IRecipe[]> => {\r\n    const result = await fetch(`https://lojickse7en.github.io/recipe-search-app-reactjs/?search=${query}`)\r\n    return (await result.json()).results;\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const query = encodeURIComponent(recipeSearch);\r\n      const response = await searchForRecipes(query);\r\n      setRecipesFound(response);\r\n    })();\r\n  }, [recipeSearch]);\r\n\r\n  const search = (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const form = event.target as HTMLFormElement;\r\n    const input = form.querySelector('#searchText') as HTMLInputElement;\r\n    setRecipeSearch(input.value);\r\n    input.value = '';\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Recipe Search App</h1>\r\n      <form className=\"searchForm\" onSubmit={event => search(event)} >\r\n        <input id=\"searchText\" type=\"text\" />\r\n        <button>Search</button>\r\n      </form>\r\n      {recipeSearch && <p>Results for {recipeSearch}...</p>}\r\n      <div className=\"recipes-container\">\r\n        {recipesFound.length &&\r\n          recipesFound.map(recipe =>\r\n            (<RecipeComponent key={recipe.href} recipe={recipe}></RecipeComponent>))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}