{"version":3,"sources":["RecipeComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RecipeComponent","props","recipe","className","src","thumbnail","alt","title","ingredients","split","map","ingredient","href","target","App","useState","recipesFound","setRecipesFound","recipeSearch","setRecipeSearch","searchForRecipes","query","a","fetch","result","json","results","useEffect","encodeURIComponent","response","onSubmit","event","preventDefault","input","querySelector","value","search","id","type","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAoBeA,EAlBQ,SAACC,GACpB,IAAQC,EAAWD,EAAXC,OACR,OACI,sBAAKC,UAAU,SAAf,UACI,sBAAKA,UAAU,QAAf,UACI,qBAAKC,IAAKF,EAAOG,WAAa,0EAA2EC,IAAKJ,EAAOK,QACrH,4BAAIL,EAAOK,WAEdL,EAAOM,aACJ,6BACKN,EAAOM,YAAYC,MAAM,KAAKC,KAAI,SAAAC,GAAU,OAAI,6BAAKA,SAG9D,mBAAGC,KAAMV,EAAOU,KAAMC,OAAO,SAA7B,6BCsDGC,MA/Df,WAEE,MAAwCC,mBAAoB,IAA5D,mBAAOC,EAAP,KAAqBC,EAArB,KAGA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAGMC,EAAgB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACFC,MAAM,iCAAD,OAAkCF,IADrC,cACjBG,EADiB,gBAETA,EAAOC,OAFE,uCAEMC,SAFN,2CAAH,sDAoCtB,OAfAC,qBAAU,WACR,sBAAC,8BAAAL,EAAA,2DAEOD,EAAQO,mBAAmBV,IAFlC,gCAMwBE,EAAiBC,GANzC,OAMOQ,EANP,OAOCZ,EAAgBY,GAPjB,0CAAD,KAWC,CAACX,IAIF,sBAAKf,UAAU,MAAf,UACE,mDACA,uBAAMA,UAAU,aAAa2B,SAAY,SAAAC,GAAK,OAlCjC,SAACA,GAEdA,EAAMC,iBAGN,IAGMC,EAHOF,EAAMlB,OAGAqB,cAAc,eACjCf,EAAgBc,EAAME,OAyB4BC,CAAOL,IAAzD,UACE,uBAAOM,GAAG,aAAaC,KAAK,SAC5B,+CAGDpB,GAAgB,6CAAiBA,EAAjB,SACjB,qBAAKf,UAAU,mBAAf,SACGa,EAAauB,QACZvB,EAAaN,KAAI,SAAAR,GAAM,OACpB,cAAC,EAAD,CAAmCA,OAAQA,GAArBA,EAAOU,eChD3B4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.10400671.chunk.js","sourcesContent":["import { IRecipe } from \"./IRecipe\";\r\n\r\nconst RecipeComponent =(props: {recipe: IRecipe}) => {\r\n    const { recipe } = props;\r\n    return (\r\n        <div className=\"recipe\">\r\n            <div className=\"title\">\r\n                <img src={recipe.thumbnail || 'https://lojickse7en.github.io/recipe-search-app-reactjs/placeholder.jpg'} alt={recipe.title} />\r\n                <p>{recipe.title}</p>\r\n            </div>\r\n            {recipe.ingredients && \r\n                <ul>\r\n                    {recipe.ingredients.split(',').map(ingredient => <li>{ingredient}</li>)}\r\n                </ul>\r\n            }\r\n            <a href={recipe.href} target='_blank'>View Recipe</a>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RecipeComponent;\r\n\r\n","import { RecordWithTtl } from 'dns';\nimport React, {  FormEvent, useEffect, useState } from 'react';\nimport './App.css';\nimport { IRecipe } from './IRecipe';\nimport RecipeComponent from './RecipeComponent';\n\nfunction App() {\n  //sate to hold on to what data to be displyed to the user. What items hve been found when a search has been performed from the API\n  const [recipesFound, setRecipesFound] = useState<IRecipe[]>([]);\n  \n  //for the input box\n  const [recipeSearch, setRecipeSearch] = useState('');\n  \n  //calls out to the proxy api created\n  const searchForRecipes = async (query: string): Promise<IRecipe[]> => {\n    const result = await fetch(`http://localhost:3001/?search=${query}`)\n    return (await result.json()).results;\n    };\n    \n    const search = (event: FormEvent<HTMLFormElement>) => {\n      //stops the form from submitting and reloading after the user submits the from\n      event.preventDefault();\n\n      //reference to the form\n      const form = event.target as HTMLFormElement;\n\n      //reference to the input\n      const input = form.querySelector('#searchText') as HTMLFormElement;\n      setRecipeSearch(input.value);\n    };\n\n\n\n   \n\n  useEffect(() => {\n    (async () => {\n      //if there is any special charatcters in the recipeSearch state\n      const query = encodeURIComponent(recipeSearch)\n      //conditional statement to only run the API query when user has done a search\n      if (query) {\n        //call thee searchforRecipies function we created and pass the query fucntion created\n      const response = await searchForRecipes(query);\n      setRecipesFound(response);\n      }\n      \n    })();\n  }, [recipeSearch]);\n\n\n  return (\n    <div className=\"App\">\n      <h1>Recipe Search App</h1>\n      <form className='searchForm' onSubmit = {event => search(event)}>\n        <input id='searchText' type='text'/>\n        <button>Search</button>\n      </form>\n      {/* markup for component */}\n      {recipeSearch && <p>Results for { recipeSearch }...</p>}\n      <div className='recipe-container'>\n        {recipesFound.length && \n          recipesFound.map(recipe =>\n            (<RecipeComponent key={recipe.href} recipe={recipe}></RecipeComponent>)\n          )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}